set nocompatible

" Use the 'google' package by default (see http://go/vim/packages).
source /usr/share/vim/google/google.vim
source /usr/share/vim/google/glug/bootstrap.vim

call plug#begin('~/.vim/plugged')
Plug 'chrisbra/changesPlugin'
Plug 'tpope/vim-unimpaired'
Plug 'vim-syntastic/syntastic'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'mileszs/ack.vim'
Plug 'thaerkh/vim-workspace'
Plug 'pboettch/vim-highlight-cursor-words'
Plug 'mhinz/vim-signify'
Plug 'ctrlpvim/ctrlp.vim'
call plug#end()

" Let CtrlP not go all the way up to the root of the client. Instead, consider a
" METADATA file to delimit a project.
"let g:ctrlp_root_markers = ['METADATA']
let g:ctrlp_working_path_mode = 0

" Use AG for CtrlP
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = '/usr/bin/ag %s -i --nocolor --nogroup --hidden
    \ --ignore .git
    \ --ignore .svn
    \ --ignore .hg
    \ --ignore .DS_Store
    \ --ignore "**/*.pyc"
    \ --ignore .git5_specs
    \ --ignore review
    \ -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 1
endif

set background=light
let mapleader = " "
map <Leader>v  :source ~/.vimrc<CR> :e<CR>

au User lsp_setup call lsp#register_server({
    \ 'name': 'CiderLSP',
    \ 'cmd': {server_info->[
    \   '/google/bin/releases/editor-devtools/ciderlsp',
    \   '--tooltag=vim-lsp',
    \   '--noforward_sync_responses',
    \ ]},
    \ 'whitelist': ['c', 'cpp', 'proto', 'textproto', 'go', 'java'],
    \})

let g:workspace_session_directory = $HOME . '/.vim/sessions/'
" Leader is the backslash key by default.
nnoremap <Leader>d :LspDefinition<CR>
nnoremap <Leader>f :LspReferences<CR>
nnoremap <Leader>h :LspHover<CR>

nnoremap <Leader>w :ToggleWorkspace<CR>

let g:lsp_async_completion = 1
let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode
let g:asyncomplete_smart_completion = 1
let g:asyncomplete_auto_popup = 1


Glug codefmt
Glug codefmt-google
Glug codefmt-google auto_filetypes+=blazebuild

augroup autoformat_settings
  autocmd FileType bzl AutoFormatBuffer buildifier
  autocmd FileType go AutoFormatBuffer gofmt
  autocmd FileType java AutoFormatBuffer google-java-format
augroup END

" Load YCM (http://go/ycm) for semantic auto-completion and quick syntax
" error checking. Pulls in a google3-enabled version of YCM itself and
" a google3-specific default configuration.
Glug youcompleteme-google
Glug blazedeps auto_filetypes=`['go']`
Glug piper plugin[mappings]
Glug critique plugin[mappings]
Glug blaze !alerts plugin[mappings] 
let g:blazevim_quickfix_autoopen = 1
set autowriteall
Glug syntastic-google 
Glug syntastic-google checkers=`{'go': ['go','gofmt', 'golint']}`
Glug corpweb plugin[mappings]
filetype plugin indent on
syntax on


let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0 
let g:syntastic_check_on_open = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_check_on_wq = 1
set clipboard^=unnamedplus,unnamed
set number
set undofile
set undodir=~/.vim/undo
set nowrap
set textwidth=0
set wrapmargin=0
set cursorline
set cursorcolumn
set tw=0
set incsearch
set nohlsearch
nnoremap Y y$

let g:airline_theme='solarized'
let g:airline_sectionc='%F'
set statusline+='%F'
nnoremap <silent> <C-]> :YcmCompleter GoTo<CR>
set ignorecase
set smartcase

nmap af :w<CR>
nmap ad :SyntasticCheck<CR>:lw<CR>
let HlUnderCursor=0
let g:HiCursorWords_delay = 400

" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
"autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
set completeopt-=preview

set autowriteall

autocmd Filetype text setlocal wrap linebreak nolist ts=2 sw=2 nocursorline nocursorcolumn

" uses <Leader>r
Glug relatedfiles plugin[mappings] 

let g:signify_skip_filename_pattern = ['\.pipertmp.*']
Glug google-csimporter
nnoremap <leader>ci :CSImporter<CR>
nnoremap <leader>cs :CSImporterSort<CR>
